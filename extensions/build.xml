<?xml version="1.0" encoding="UTF-8"?>

<!-- Build file for extensions. -->
<project basedir="." default="all" name="extensions">
    <import file="../config/config.xml"/>


    <!-- Initialization for the extensions builder -->
    <target name="init">
		<property name="extensions.compiler" value="${build.intermediates.extensions}/compiler.xml" />
		<property name="extensions.compile.root" value="${build.intermediates.extensions}/compile" />

		<!-- fileset for pure extensions' libraries -->
		<fileset id="fileset.extensions.lib" dir="${extensions.root}">
			<include name="*/lib/*.jar" />
		</fileset>

		<!-- sets the property if there are any pure extensions libraries to process -->
		<pathconvert refid="fileset.extensions.lib" property="extensions.have.libs" setonempty="false" />

		<!-- fileset for pure extensions' libraries -->
		<fileset id="fileset.plugins.lib" dir="${plugins.root}">
			<include name="*/lib/*.jar" />
		</fileset>

		<!-- sets the property if there are any pure extensions libraries to process -->
		<pathconvert refid="fileset.plugins.lib" property="plugins.have.libs" setonempty="false" />

		<!-- fileset for services extensions' libraries -->
		<fileset id="fileset.services.extensions.lib" dir="${services.root}">
			<include name="*/extension/lib/*.jar" />
		</fileset>

		<!-- sets the property if there are any services extensions libraries to process -->
		<pathconvert refid="fileset.services.extensions.lib" property="extensions.have.libs" setonempty="false" />
    </target>


    <!-- Generate the build file. -->
    <target name="all" depends="init, compile, jar" />


	<!-- Compile the extensions -->
	<target name="compile" depends="generate-compiler, jar-lib">
		<mkdir dir="${extensions.compile.root}" />

		<!-- Compile every extension -->
		<subant target="compile" antfile="compiler.xml">
			<fileset dir="${build.intermediates.extensions}" includes="compiler.xml"/>
		</subant>

		<!-- Merge the pure extensions' resources into the compile directory -->
		<copy todir="${extensions.compile.root}" quiet="true" failonerror="false" includeEmptyDirs="false">
			<!-- mapper extracts the resource path relative to the resources directory -->
			<regexpmapper handledirsep="true" from="^([^/]+)/resources/(.*)$$" to="xal/extension/\1/resources/\2" />
			<fileset dir="${extensions.root}" includes="*/resources/**/*" />
		</copy>

		<!-- Merge the site specific pure extensions' resources into the compile directory -->
		<copy todir="${extensions.compile.root}" quiet="true" failonerror="false" includeEmptyDirs="false">
			<!-- mapper extracts the resource path relative to the resources directory -->
			<regexpmapper handledirsep="true" from="^([^/]+)/resources/(.*)$$" to="xal/extension/\1/resources/\2" />
			<fileset dir="${site.extensions.root}" includes="*/resources/**/*" />
		</copy>

		<!-- Merge the plugins' resources into the compile directory -->
		<copy todir="${extensions.compile.root}" quiet="true" failonerror="false" includeEmptyDirs="false">
			<!-- mapper extracts the resource path relative to the resources directory -->
			<regexpmapper handledirsep="true" from="^([^/]+)/resources/(.*)$$" to="xal/plugin/\1/resources/\2" />
			<fileset dir="${plugins.root}" includes="*/resources/**/*" />
		</copy>

		<!-- Merge the site specific plugins' resources into the compile directory -->
		<copy todir="${extensions.compile.root}" quiet="true" failonerror="false" includeEmptyDirs="false">
			<!-- mapper extracts the resource path relative to the resources directory -->
			<regexpmapper handledirsep="true" from="^([^/]+)/resources/(.*)$$" to="xal/plugin/\1/resources/\2" />
			<fileset dir="${site.plugins.root}" includes="*/resources/**/*" />
		</copy>

		<!-- Merge the services extensions' resources into the compile directory -->
		<copy todir="${extensions.compile.root}" quiet="true" failonerror="false" includeEmptyDirs="false">
			<!-- mapper extracts the resource path relative to the resources directory -->
			<regexpmapper handledirsep="true" from="^([^/]+)/extension/resources/(.*)$$" to="xal/service/\1/resources/\2" />
			<fileset dir="${services.root}" includes="*/extension/resources/**/*" />
		</copy>

		<!-- Merge the site specific services extensions' resources into the compile directory -->
		<copy todir="${extensions.compile.root}" quiet="true" failonerror="false" includeEmptyDirs="false">
			<!-- mapper extracts the resource path relative to the resources directory -->
			<regexpmapper handledirsep="true" from="^([^/]+)/extension/resources/(.*)$$" to="xal/service/\1/resources/\2" />
			<fileset dir="${site.services.root}" includes="*/extension/resources/**/*" />
		</copy>

		<!-- Merge the applications extensions' resources into the compile directory -->
		<copy todir="${extensions.compile.root}" quiet="true" failonerror="false" includeEmptyDirs="false">
			<!-- mapper extracts the resource path relative to the resources directory -->
			<regexpmapper handledirsep="true" from="^([^/]+)/extension/resources/(.*)$$" to="xal/app/\1/resources/\2" />
			<fileset dir="${apps.root}" includes="*/extension/resources/**/*" />
		</copy>

		<!-- Merge the site specific applications extensions' resources into the compile directory -->
		<copy todir="${extensions.compile.root}" quiet="true" failonerror="false" includeEmptyDirs="false">
			<!-- mapper extracts the resource path relative to the resources directory -->
			<regexpmapper handledirsep="true" from="^([^/]+)/extension/resources/(.*)$$" to="xal/app/\1/resources/\2" />
			<fileset dir="${site.apps.root}" includes="*/extension/resources/**/*" />
		</copy>
	</target>


	<!-- Jar all extensions resources -->
    <target  name="jar-resources" depends="init">
        <mkdir dir="${build.intermediates.extensions}" />
		<property name="extension.intermediates.resources" value="${build.intermediates.extensions}/resources" />
		<mkdir dir="${extension.intermediates.resources}" />

		<!-- Merge the pure extensions' resources into the extensions build intermedites resources directory -->
		<copy todir="${extension.intermediates.resources}" quiet="true" failonerror="false" includeEmptyDirs="false">
			<regexpmapper handledirsep="true" from="^[^/]+/resources/(.*)$$" to="\1" />
			<fileset dir="${extensions.root}" includes="*/resources/**/*" />
		</copy>

		<!-- Merge the site specific pure extensions' resources into the extensions build intermedites resources directory -->
		<copy todir="${extension.intermediates.resources}" quiet="true" failonerror="false" includeEmptyDirs="false">
			<regexpmapper handledirsep="true" from="^[^/]+/resources/(.*)$$" to="\1" />
			<fileset dir="${site.extensions.root}" includes="*/resources/**/*" />
		</copy>

		<!-- Merge the services extensions' resources into the extensions build intermedites resources directory -->
		<copy todir="${extension.intermediates.resources}" quiet="true" failonerror="false" includeEmptyDirs="false">
			<regexpmapper handledirsep="true" from="^[^/]+/extension/resources/(.*)$$" to="\1" />
			<fileset dir="${services.root}" includes="*/extension/resources/**/*" />
		</copy>

		<!-- Merge the site specific services extensions' resources into the extensions build intermedites resources directory -->
		<copy todir="${extension.intermediates.resources}" quiet="true" failonerror="false" includeEmptyDirs="false">
			<regexpmapper handledirsep="true" from="^[^/]+/extension/resources/(.*)$$" to="\1" />
			<fileset dir="${site.services.root}" includes="*/extension/resources/**/*" />
		</copy>

		<!-- Merge the applications extensions' resources into the extensions build intermedites resources directory -->
		<copy todir="${extension.intermediates.resources}" quiet="true" failonerror="false" includeEmptyDirs="false">
			<regexpmapper handledirsep="true" from="^[^/]+/extension/resources/(.*)$$" to="\1" />
			<fileset dir="${apps.root}" includes="*/extension/resources/**/*" />
		</copy>

		<!-- Merge the site specific applications extensions' resources into the extensions build intermedites resources directory -->
		<copy todir="${extension.intermediates.resources}" quiet="true" failonerror="false" includeEmptyDirs="false">
			<regexpmapper handledirsep="true" from="^[^/]+/extension/resources/(.*)$$" to="\1" />
			<fileset dir="${site.apps.root}" includes="*/extension/resources/**/*" />
		</copy>

        <jar compress="true" jarfile="${build.intermediates.extensions}/resources.jar" index="true">
			<fileset dir="${extension.intermediates.resources}" />
        </jar>
    </target>



	<!-- Archive the extensions -->
    <target  name="jar" depends="init, compile">
        <mkdir dir="${extensions.compile.root}" />
        <mkdir dir="${build.intermediates.shared}" />
        <jar compress="true" jarfile="${build.intermediates.shared}/xal-extensions.jar" index="true" basedir="${extensions.compile.root}" includes="xal/**/*">
			<zipgroupfileset dir="${build.intermediates.extensions}">
				<patternset>
					<include name="lib.jar" />
				</patternset>
			</zipgroupfileset>
		</jar>
    </target>


	<!-- Join the third party jars into a common external jar file -->
    <target name="jar-lib" depends="init" if="extensions.have.libs">
        <mkdir dir="${build.intermediates.extensions}" />
        <jar compress="true" jarfile="${build.intermediates.extensions}/lib.jar" duplicate="preserve">
			<!-- include jars from each extension -->
			<zipgroupfileset dir="${extensions.root}">
				<include name="*/lib/*.jar" />
			</zipgroupfileset>

			<!-- include jars from each plugin -->
			<zipgroupfileset dir="${plugins.root}">
				<include name="*/lib/*.jar" />
			</zipgroupfileset>

			<!-- include jars from each service extension -->
			<zipgroupfileset dir="${services.root}">
				<include name="*/extension/lib/*.jar" />
			</zipgroupfileset>

			<!-- include jars from each app extension -->
			<zipgroupfileset dir="${apps.root}">
				<include name="*/extension/lib/*.jar" />
			</zipgroupfileset>
        </jar>
    </target>


	<!-- Clean the extensions -->
	<target name="clean" depends="generate-compiler">
        <delete dir="${build.intermediates.extensions}" quiet="true" />
	</target>


	<!-- purge the extensions build intermediates -->
    <target name="purge-intermediates" description="Purge extensions build intermediates." >
        <delete dir="${build.intermediates.extensions}" />
        <echo message="Purged the extensions build intermediates directory!" />
    </target>


	<!-- Generate the build file for compiling extensions. -->
	<target name="generate-compiler" depends="init">
		<touch file="${extensions.compiler}" mkdirs="true" />

		<echo file="${extensions.compiler}">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project basedir="." default="compile" name="xal.extension-compiler"&gt;
	&lt;target name="compile"&gt;
		&lt;mkdir dir="${extensions.compile.root}" /&gt;
		&lt;javac debug="true" source="${build.compile.java.source}" target="${build.compile.java.target}" bootclasspath="${xal.bootclasspath}" includeAntRuntime="no" deprecation="true" destdir="${extensions.compile.root}" includes="**" sourcepath=""&gt;

			&lt;classpath&gt;
				&lt;pathelement location="${build.intermediates.shared}/xal-core.jar" /&gt;
				&lt;pathelement location="${build.intermediates.extensions}/lib.jar" /&gt;
			&lt;/classpath&gt;
			&lt;compilerarg value="-Xlint" /&gt;
		</echo>

		<!-- loop over every extension directory and add the source code -->
		<subant genericantfile="${ant.file.extensions}" target="append-extension">
			<dirset dir="${extensions.root}" includes="*" />
			<dirset dir="${plugins.root}" includes="*" />
			<dirset dir="${services.root}" includes="*/extension" />
			<dirset dir="${apps.root}" includes="*/extension" />
		</subant>
		<echo file="${extensions.compiler}" append="true">
		&lt;/javac&gt;
	&lt;/target&gt;
&lt;/project&gt;&#10;</echo>
	</target>


    <!-- Append the extension to the common extensions build file. -->
    <target name="append-extension" depends="init">
		<echo file="${extensions.compiler}" append="true">&lt;src path="${basedir}/src" /&gt;
		</echo>
		<echo message="Appending extension: ${basedir}" />
    </target>

	
	<!-- provide guidance on the various targets -->
    <target name="help">
		<echo message="Build the XAL Extensions" />
		<echo message="Usage: ant [ant options] target1 [target2 | target3 | ... ]" />
		<echo message="" />
		<echo message="  where target(s) can be:" />
		<echo message="    help ....................... Print this message." />
		<echo message="    all ........................ Build the shared extensions library." />
		<echo message="    compile .................... Compile the extensions." />
		<echo message="    jar ........................ Archive the shared extensions library." />
		<echo message="    jar-resources .............. Assemble the extensions resources into an intermediate extensions jar file, resources.jar" />
		<echo message="    purge-intermediates ........ Purge the build intermediates directory for all extensions." />
    </target>

</project>