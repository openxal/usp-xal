<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" version="1.0">
	<xs:simpleType name="nodeType">
		<xs:union memberTypes="knownNodeTypes xs:string"/>
	</xs:simpleType>
	<xs:simpleType name="knownNodeTypes">
		<xs:annotation>
			<xs:documentation>
				Node type describes the type of accelerator device.
				There's a class implementing the type in package xal.smf.impl or may be provided externally.
				One class may implement multiple types and register some of them via ElementTypeManager.				
				The types, ones that the implementation doesn't register or external ones, may be registered through *.impl file.				
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="BLM">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.BLM<br/>
						pertinant to modeling Beam Loss monitors.
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="BPM">
				<xs:annotation>
					<xs:documentation> 
						Implementation: xal.smf.impl.BPM, xal.smf.impl.RBPM (warning registered 2 times)<br/>
						pertinant to modeling Beam Position monitors.						
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="RBPM">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.RBPM extends BPM<br/>
						SNS Ring BPMs. The Ring BPMs can set up to 4 different gains within	its 1060 waveform points.
						They also have 2 modes: base-band and 402.5 MHz.
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="bend">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.Bend extends Dipole extends Electromagnet extends Magnet<br/>
						Bend is used to represent a normal horizontal dipole magnet rather
						than a corrector.
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="DH">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.Bend extends Dipole extends Electromagnet extends Magnet<br/>
						Bend is used to represent a normal horizontal dipole magnet rather
						than a corrector.
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="BSM">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.BunchShapeMonitor<br/>
						Bunch Shape Monitor  
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="BCM">
				<xs:annotation>
					<xs:documentation> 
						Implementation: xal.smf.impl.CurrentMonitor<br/>
						pertinant to modeling Current Monitors
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="CVG">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.CvgGauge<br/>
						Convectron Gauge implementation. This type of vacuum gauge is for higher
						pressures (during rough pumpdown).
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="dipole">
				<xs:annotation>
					<xs:documentation> 
						Implementation: xal.smf.impl.Dipole extends Electromagnet extends Magnet<br/>
						main dipoles 
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="D">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.Dipole extends Electromagnet extends Magnet<br/>
						main dipoles 
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="EDipole">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.EDipole extends Electromagnet extends Magnet<br/>
						electrostactic 
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			
			<xs:enumeration value="DHE">
				<xs:annotation>	
					<xs:documentation>
						Implementation: xal.smf.impl.EDipole extends Electromagnet extends Magnet<br/>
						Not registered<br/>
						electrostactic 
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="DVE">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.EDipole extends Electromagnet extends Magnet<br/>
						Not registered<br/>
						electrostactic 
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="emag">
				<xs:annotation>
					<xs:documentation> 
						Implementation: xal.smf.impl.Electromagnet extends Magnet<br/>
						electromagnet 
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="electromagnet">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.Electromagnet extends Magnet<br/> 
						electromagnet 
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="EQuad">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.EQuad extends Electrostatic<br/>
						Not registered
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="QHE">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.EQuad extends Electrostatic<br/>
						Not registered
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="QVE">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.EQuad extends Electrostatic<br/>
						Not registered
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="QSE">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.EQuad extends Electrostatic<br/>
						Not registered
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>		

			<xs:enumeration value="EKick">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.ExtractionKicker extends Dipole extends Electromagnet extends Magnet<br/>					
						the extraction kicker represents a pulsed magnet for extracting the	beam vertically from the ring
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="kicker">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.ExtractionKicker extends Dipole extends Electromagnet extends Magnet<br/>					
						the extraction kicker represents a pulsed magnet for extracting the	beam vertically from the ring
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="vertkicker">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.ExtractionKicker extends Dipole extends Electromagnet extends Magnet<br/>					
						the extraction kicker represents a pulsed magnet for extracting the	beam vertically from the ring
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="extractionkicker">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.ExtractionKicker extends Dipole extends Electromagnet extends Magnet<br/>					
						the extraction kicker represents a pulsed magnet for extracting the	beam vertically from the ring
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>

			<xs:enumeration value="DCH">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.HDipoleCorr extends Dipole extends Electromagnet extends Magnet<br/>					
					 	Horizontal Dipole corrector element
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="hcorr">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.HDipoleCorr extends Dipole extends Electromagnet extends Magnet<br/>					
					 	Horizontal Dipole corrector element
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="horzcorr">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.HDipoleCorr extends Dipole extends Electromagnet extends Magnet<br/>					
					 	Horizontal Dipole corrector element
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="DCV">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.VDipoleCorr extends Dipole extends Electromagnet extends Magnet<br/>										 	
					 	Vertical Dipole corrector element
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="vertcorr">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.VDipoleCorr extends Dipole extends Electromagnet extends Magnet<br/>										 	
					 	Vertical Dipole corrector element
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="vcorr">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.VDipoleCorr extends Dipole extends Electromagnet extends Magnet<br/>										 	
					 	Vertical Dipole corrector element
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>

			<xs:enumeration value="IG">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.IonGauge extends Vacuum<br/>					
					 	Ion Gauge
					 </xs:documentation>
				</xs:annotation>
			</xs:enumeration>

			<xs:enumeration value="magnet">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.Magnet<br/>
						Children: Electromagnet, PermanentMagnet<br/>
					 	common to all magnets 
					 </xs:documentation>
				</xs:annotation>
			</xs:enumeration>

			<xs:enumeration value="marker">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.Marker<br/>
					 	for generic marker 
					 </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="VIW">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.Marker<br/>
						Not registered					
					 </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="Foil">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.Marker<br/>
						Not registered					
					 </xs:documentation>
				</xs:annotation>
			</xs:enumeration>			
			<xs:enumeration value="Tgt">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.Marker<br/>
						Not registered					
					 </xs:documentation>
				</xs:annotation>
			</xs:enumeration>			
			<xs:enumeration value="Harp">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.Marker<br/>
						Not registered					
					 </xs:documentation>
				</xs:annotation>
			</xs:enumeration>			
			<xs:enumeration value="ChMPS">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.Marker<br/>
						Not registered					
					 </xs:documentation>
				</xs:annotation>
			</xs:enumeration>			
			<xs:enumeration value="LStrp">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.Marker<br/>
						Not registered					
					 </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="LW">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.Marker<br/>
						Not registered					
					 </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
						
			<xs:enumeration value="ND">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.NeutronDetector extends BLM<br/>
						Neutron Detector class.<br/>
						ND's are a subclass of loss monitors that detect neutron losses.
						A seperate class is provided for these since they may need to be grabbed separatly.
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="pmag">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.PermanentMagnet extends Magnet<br/>
						superclass of all permanent magnet
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="permanentmagnet">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.PermanentMagnet extends Magnet<br/>
						superclass of all permanent magnet
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PQ">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.PermQuadrupole extends PermanentMagnet extends Magnet<br/>
					 	Permanent magnet Quadrupole.<br/>
					 	Unlike many other beam line elements, PermQuadrupole represents more than one official
						type (PMQH and PMQV) as specified by the naming convention.
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="permquad">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.PermQuadrupole extends PermanentMagnet extends Magnet<br/>
					 	Permanent magnet Quadrupole.<br/>
					 	Unlike many other beam line elements, PermQuadrupole represents more than one official
						type (PMQH and PMQV) as specified by the naming convention.
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PMQH">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.PermQuadrupole extends PermanentMagnet extends Magnet<br/>
						Not registered<br/>
					 	Permanent magnet Quadrupole.<br/>
					 	Unlike many other beam line elements, PermQuadrupole represents more than one official
						type (PMQH and PMQV) as specified by the naming convention.
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PMQV">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.PermQuadrupole extends PermanentMagnet extends Magnet<br/>
						Not registered<br/>
					 	Permanent magnet Quadrupole.<br/>
					 	Unlike many other beam line elements, PermQuadrupole represents more than one official
						type (PMQH and PMQV) as specified by the naming convention.
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			
			<xs:enumeration value="WS">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.ProfileMonitor<br/>
						Represents the wire scanner device using the original API 						
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="wirescanner">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.ProfileMonitor<br/>
						Represents the wire scanner device using the original API
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="profilemonitor">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.ProfileMonitor<br/>
						Represents the wire scanner device using the original API					
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
					
			<xs:enumeration value="Q">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.Quadrupole extends Electromagnet extends Magnet<br/>
					 	Quadrupole implements an Electromagnet<br/>
						Quadrupole supplied by a single power supply. 
						Unlike many other beam line elements, Quadrupole represents more 
						than one official type (QH and QV) as specified by the naming convention.
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="emquad">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.Quadrupole extends Electromagnet extends Magnet<br/>
					 	Quadrupole implements an Electromagnet<br/>
						Quadrupole supplied by a single power supply. 
						Unlike many other beam line elements, Quadrupole represents more 
						than one official type (QH and QV) as specified by the naming convention.
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="quad">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.Quadrupole extends Electromagnet extends Magnet<br/>
					 	Quadrupole implements an Electromagnet<br/>
						Quadrupole supplied by a single power supply. 
						Unlike many other beam line elements, Quadrupole represents more 
						than one official type (QH and QV) as specified by the naming convention.
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="quadrupole">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.Quadrupole extends Electromagnet extends Magnet<br/>
					 	Quadrupole implements an Electromagnet<br/>
						Quadrupole supplied by a single power supply. 
						Unlike many other beam line elements, Quadrupole represents more 
						than one official type (QH and QV) as specified by the naming convention.
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			
			<xs:enumeration value="QV">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.Quadrupole extends Electromagnet extends Magnet<br/>
						Not registered.<br/>
					 	Quadrupole implements an Electromagnet<br/>
						Quadrupole supplied by a single power supply. 
						Unlike many other beam line elements, Quadrupole represents more 
						than one official type (QH and QV) as specified by the naming convention.
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>			
			<xs:enumeration value="QH">
			<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.Quadrupole extends Electromagnet extends Magnet<br/>
						Not registered.<br/>
					 	Quadrupole implements an Electromagnet<br/>
						Quadrupole supplied by a single power supply. 
						Unlike many other beam line elements, Quadrupole represents more 
						than one official type (QH and QV) as specified by the naming convention.
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>			
			<xs:enumeration value="QSC">
			<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.Quadrupole extends Electromagnet extends Magnet<br/>
						Not registered.<br/>
					 	Quadrupole implements an Electromagnet<br/>
						Quadrupole supplied by a single power supply. 
						Unlike many other beam line elements, Quadrupole represents more 
						than one official type (QH and QV) as specified by the naming convention.
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>			

			<xs:enumeration value="vacuum">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.Vacuum<br/>
						Different types of vacuum guages are derived from this class. 
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>

			<xs:enumeration value="QT">
				<xs:annotation>
					<xs:documentation> 
						Implementation: xal.smf.impl.TrimmedQuadrupole extends Quadrupole extends Electromagnet extends Magnet<br/>
						TrimmedQuadrupole is a subclass of Quadrupole that has a trim power supply in addition to a main power supply.
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="trimmedquad">
				<xs:annotation>
					<xs:documentation> 
						Implementation: xal.smf.impl.TrimmedQuadrupole extends Quadrupole extends Electromagnet extends Magnet<br/>
						TrimmedQuadrupole is a subclass of Quadrupole that has a trim power supply in addition to a main power supply.
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="QTH">
				<xs:annotation>
					<xs:documentation> 
						Implementation: xal.smf.impl.TrimmedQuadrupole extends Quadrupole extends Electromagnet extends Magnet<br/>
						Not registered.<br/>
						TrimmedQuadrupole is a subclass of Quadrupole that has a trim power supply in addition to a main power supply.
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="QTV">
				<xs:annotation>
					<xs:documentation> 
						Implementation: xal.smf.impl.TrimmedQuadrupole extends Quadrupole extends Electromagnet extends Magnet<br/>
						Not registered.<br/>
						TrimmedQuadrupole is a subclass of Quadrupole that has a trim power supply in addition to a main power supply.
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			

			<xs:enumeration value="S">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.Sextupole extends Electromagnet extends Magnet<br/>
						Sextupole magnet
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="emsext">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.Sextupole extends Electromagnet extends Magnet<br/>
						Sextupole magnet
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="sext">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.Sextupole extends Electromagnet extends Magnet<br/>
						Sextupole magnet
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="sextupole">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.Sextupole extends Electromagnet extends Magnet<br/>
						Sextupole magnet
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="SH">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.Sextupole extends Electromagnet extends Magnet<br/>
						Not registered.<br/>
						Sextupole magnet
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="SV">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.Sextupole extends Electromagnet extends Magnet<br/>
						Not registered.<br/>
						Sextupole magnet
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="SSH">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.Sextupole extends Electromagnet extends Magnet<br/>
						Not registered.<br/>
						Sextupole magnet
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="SSV">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.Sextupole extends Electromagnet extends Magnet<br/>
						Not registered.<br/>
						Sextupole magnet
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="SOL">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.Solenoid extends Electromagnet extends Magnet<br/>
						Solenoid
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="RG">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.RfGap<br/>
						The RfGap class is meant to be used in connection with a set of related RF gaps, 
						such as the gaps in a DTL Tank, which are all part of a single resonant cavity controlled by a single klystron.
						Each gap may have a fixed scale factor for both the field and phase, relative to a nominal field and phase. 
 					 </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="rfgap">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.RfGap<br/>
						The RfGap class is meant to be used in connection with a set of related RF gaps, 
						such as the gaps in a DTL Tank, which are all part of a single resonant cavity controlled by a single klystron.
						Each gap may have a fixed scale factor for both the field and phase, relative to a nominal field and phase.
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>	

			<!-- also sequences -->
			
			<xs:enumeration value="CCL">
				<xs:annotation>
					<xs:documentation>
					Implementation: xal.smf.impl.CCL extends RfCavity<br/>
					CCL</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="DTLTank">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.DTLTank extends RfCavity<br/>
					 	Drift Tube Linacs<br/>
					 	These devices have RfGaps in them, which are controlled by a single RfCavity. 
					 	That is, the RfCavity contains the hooks to the	klystron signals, which controll all of the RfGaps together.
						As the DTLTank is also a sequence, it is possible for it to	contain	other types of nodes, such as quads and BPMs.
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="Bnch">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.ReBuncher extends RfCavity<br/>
						ReBuncher
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="rebuncher">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.ReBuncher extends RfCavity<br/>
						ReBuncher
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="RF">
				<xs:annotation>
					<xs:documentation> 
						Implementation: xal.smf.impl.RfCavity<br/>
						The Rf Cavity is the device that is directly connected to a klystron.
						There are internal RF gap(s) within this cavity, which are controlled by the cavity.
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="rfcavity">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.RfCavity<br/>
					 	The Rf Cavity is the device that is directly connected to a klystron.
						There are internal RF gap(s) within this cavity, which are controlled by the cavity.
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>					
			<xs:enumeration value="SCLCavity">
				<xs:annotation>
					<xs:documentation> 
						Implementation: xal.smf.impl.SCLCavity extends RfCavity<br/>
						SCLCavity class is used to represent an SCL RF cavity.
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="EMS">
			</xs:enumeration>		
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="seqType">
		<xs:annotation>
			<xs:documentation>
				Sequence type describes the type of accelerator device.
				There's a class implementing the type in package xal.smf.impl or may be provided externally.
				One class may implement multiple types and register some of them via ElementTypeManager.				
				The types, ones that the implementation doesn't register or external ones, may be registered through *.impl file.				
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="CCL">
				<xs:annotation>
					<xs:documentation>
					Implementation: xal.smf.impl.CCL extends RfCavity<br/>
					CCL</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="DTLTank">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.DTLTank extends RfCavity<br/>
					 	Drift Tube Linacs<br/>
					 	These devices have RfGaps in them, which are controlled by a single RfCavity. 
					 	That is, the RfCavity contains the hooks to the	klystron signals, which controll all of the RfGaps together.
						As the DTLTank is also a sequence, it is possible for it to	contain	other types of nodes, such as quads and BPMs.
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="Bnch">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.ReBuncher extends RfCavity<br/>
						ReBuncher
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="rebuncher">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.ReBuncher extends RfCavity<br/>
						ReBuncher
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="RF">
				<xs:annotation>
					<xs:documentation> 
						Implementation: xal.smf.impl.RfCavity<br/>
						The Rf Cavity is the device that is directly connected to a klystron.
						There are internal RF gap(s) within this cavity, which are controlled by the cavity.
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="rfcavity">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.RfCavity<br/>
					 	The Rf Cavity is the device that is directly connected to a klystron.
						There are internal RF gap(s) within this cavity, which are controlled by the cavity.
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>					
			<xs:enumeration value="SCLCavity">
				<xs:annotation>
					<xs:documentation> 
						Implementation: xal.smf.impl.SCLCavity extends RfCavity<br/>
						SCLCavity class is used to represent an SCL RF cavity.
					</xs:documentation>
				</xs:annotation>
			</xs:enumeration>		
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="comboSeqType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="Ring">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.Ring<br/>
			 			Ring is a subclass of combo sequence that is intended to support the special needs of a Ring.
			 			A ring is made up of ring segments.
			 		</xs:documentation>
			 	</xs:annotation>
			 </xs:enumeration>
			<xs:enumeration value="AcceleratorSeqCombo">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.AcceleratorSeqCombo<br/>
						The implementation of the accelerator combo sequence.
						This class is meant to deal with pasting together existing sequences into new sequences.
 					</xs:documentation>
			 	</xs:annotation>
			 </xs:enumeration>
		</xs:restriction>
	</xs:simpleType>

	<xs:complexType name="acceleratorNode">
		<xs:annotation>
			<xs:documentation>
				A node element describes a basic hardware element, such as a magnet.
			</xs:documentation>
		</xs:annotation>
		<xs:choice maxOccurs="unbounded">
			<xs:element minOccurs="0" maxOccurs="1" ref="channelsuite" />
			<xs:element minOccurs="0" maxOccurs="unbounded" ref="attributes" />
			<!-- implemented in specific sub nodes -->
			<xs:element minOccurs="0" maxOccurs="1" name="ps">
				<xs:annotation>
					<xs:documentation>
						Implementation: xal.smf.impl.Electromagnet<br/>
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="main" type="xs:string" />
					<xs:attribute name="trim" type="xs:string" />
				</xs:complexType>
			</xs:element>
		</xs:choice>
		<xs:attribute name="id" type="xs:string" use="required">		
			<xs:annotation>
				<xs:documentation>The value of id is the unique identifier string for the described node.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="type" type="nodeType"/> <!-- normally required, not required in hardware_status.xdxf -->
		<xs:attribute name="softType" type="xs:string" />
		<xs:attribute name="pid" type="xs:string">
			<xs:annotation>
				<xs:documentation>Physics id </xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="eid" type="xs:string">
			<xs:annotation>
				<xs:documentation>Engineering id </xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="status" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>Indicates whether or not a hardware component was on line. If present it should always be set to “yes”</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="len" type="xs:double">
			<xs:annotation>
				<xs:documentation>Length of hardware node (m). Taken to be zero if attribute is absent.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="pos" type="xs:double">
		<xs:annotation>
				<xs:documentation>Position within parent (m). The pos attribute always refers to the position of the node’s center location.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="s" type="xs:double">
			<xs:annotation>
				<xs:documentation>s display coordinate </xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="exclude" type="xs:boolean" />
		<xs:attribute name="mod-comment" type="xs:string">
			<xs:annotation>
				<xs:documentation>
					Apparently used in hardware_status.xdxf, but not in the code.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>

	<xs:complexType name="acceleratorSeq">
		<xs:annotation>
			<xs:documentation>
				Implementation: xal.smf.AcceleratorSeq.<br/>
				Sequences are extended from node and contain same XML attributes. 
				Also device types which are sequences may also be used as a node.
				Sequences may contain other sequences or nodes.
			
				<p>Typical use cases of a sequence are:<br/>
				<ul>
				<li>When a sequence is describing a particular hardware object in the beamline it contains a linear listing of nodes.</li>
				<li>When it is describing a composite accelerator component it contains other sequences. There are no restrictions on the depth of this nesting.</li>
				<li>When it is describing a macro device, such as RT cavity, it also contains channelsuite element.</li>
				</ul>				
				</p>
			</xs:documentation>
		</xs:annotation>
		<xs:choice maxOccurs="unbounded">
			<xs:element minOccurs="0" maxOccurs="unbounded" name="node"
				type="acceleratorNode" />
			<xs:element minOccurs="0" maxOccurs="unbounded" name="sequence"
				type="acceleratorSeq" />
			<!-- derived from acceleratorNode -->
			<xs:element minOccurs="0" maxOccurs="1" ref="channelsuite" />
			<xs:element minOccurs="0" maxOccurs="unbounded" ref="attributes" />
		</xs:choice>
		<!-- derived from acceleratorNode -->
		<xs:attribute name="id" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>The value of id is the unique identifier string for the described sequence.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="type" type="seqType"/>
		<xs:attribute name="softType" type="xs:string" />
		<xs:attribute name="pid" type="xs:string">
			<xs:annotation>
				<xs:documentation>Physics id </xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="eid" type="xs:string">
			<xs:annotation>
				<xs:documentation>Engineering id </xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="status" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>status of the node which identifies whether the
					node is operational </xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="len" type="xs:double"> <!-- normally required, except in hardware_status.xdxf -->
			<xs:annotation>
				<xs:documentation>Length of hardware node (m). Taken to be zero if attribute is absent.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="pos" type="xs:double">
		<xs:annotation>
				<xs:documentation>Position within parent (m). The pos attribute always refers to the position of the node’s center location.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="s" type="xs:double">
			<xs:annotation>
				<xs:documentation>s display coordinate </xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="exclude" type="xs:boolean" />
	</xs:complexType>


	<xs:complexType name="acceleratorComboSeq">
		<xs:annotation>
			<xs:documentation>
				This class is meant to deal with pasting together
				existing sequences into new sequences.
				Each comboseq contains a list of &lt;sequence&gt; elements. 
				This feature is primarily a convenience to XAL users where &lt;sequence&gt; objects may be grouped together 
				to form larger composite lattice objects making sense in the context of the current accelerator complex.
			</xs:documentation>
		</xs:annotation>
		<xs:choice maxOccurs="unbounded">
			<!-- although whole machinery is derived from acceleratorSeq only the following is used-->
			<xs:element minOccurs="0" maxOccurs="unbounded" name="sequence">
				<xs:complexType>
					<xs:attribute name="id" type="xs:string"/>
				</xs:complexType>
			</xs:element>					
		</xs:choice>
		<!-- derived from acceleratorNode -->
		<xs:attribute name="id" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>The value of id is the unique identifier string for the described combination sequence.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="type" type="comboSeqType" />
	</xs:complexType>

	<xs:complexType name="accelerator">
		<xs:sequence>
			<xs:element minOccurs="0" maxOccurs="unbounded" name="comboseq"
				type="acceleratorComboSeq" />
						
			<xs:element minOccurs="0" maxOccurs="unbounded" name="sequence" type="acceleratorSeq" /> <!-- derived from acceleratorSeq -->
				
			<xs:element minOccurs="0" maxOccurs="1" ref="powersupplies" />
			<!-- not used -->
			<!--<xs:element minOccurs="0" maxOccurs="unbounded" name="node" type="accleratorNode"/> 
				<xs:element minOccurs="0" maxOccurs="1" ref="channelsuite"/> <xs:element 
				minOccurs="0" maxOccurs="unbounded" ref="attributes"/> -->
		</xs:sequence>
		<xs:attribute name="system" type="xs:string">
			<xs:annotation>
				<xs:documentation>
					The name of the accelerator system that is described.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="ver" type="xs:string">
			<xs:annotation>
				<xs:documentation>
					The ver attribute contains any versioning information associated with the file.
					This feature allows users to monitor changes in the XAL configuration with a version stamp,
					facilitating more accurate comparisons of archived data.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="version" type="xs:string">
			<xs:annotation>
				<xs:documentation>
					Apparently used in hardware_status.xdxf, but not in the code.
					Don't change to "ver" / if you do, the ver from main file will be lost when loading.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="date" type="xs:string">
			<xs:annotation>
				<xs:documentation>
					Date, contains the date in which the optics file was last built.
					The date value can be expressed in the ISO 8601	standard [12],
					however, any date format recognized by the Java class DateFormat [9] is valid.
					XAL only writes this value.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<!-- other attributes also derived but not used -->
	</xs:complexType>

	<xs:element name="xdxf" type="accelerator">
	<xs:annotation>
		<xs:documentation>
			There is only  one &lt;xdxf&gt; element in the optics file and 
			it contains a description of the all the accelerator hardware considered by XAL. 
			That is, the &lt;xdxf&gt; element is the root of the accelerator hierarchy, 
			containing all the accelerator hardware information in the optics file. 		
		</xs:documentation>
	</xs:annotation>
	  <!-- TODO check if subsequence-id's and node id's need to be unique too and add key -->
		<xs:key name="sequence-id">
			<xs:selector xpath="sequence" />
			<xs:field xpath="@id" />
		</xs:key>
		<xs:key name="comboseq-id">
			<xs:selector xpath="comboseq" />
			<xs:field xpath="@id" />
		</xs:key>
		<xs:keyref name="comboseq-sequenceid" refer="sequence-id">
			<xs:selector xpath="comboseq/sequence" />
			<xs:field xpath="@id" />
		</xs:keyref>
	</xs:element>

	<xs:element name="timing">
		<xs:annotation>
			<xs:documentation>
				Used as a root element in a file, which lists all the general timing signals used by XAL. 
				Such signals are used by applications that trigger on certain events,
				like an RF pulse, or monitor certain aspects of the machine, such as the orbit.
			</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="channelsuite"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>

	<xs:simpleType name="doubleArrayType">
		<xs:restriction base="xs:string">
			<xs:pattern value="((\+|-)?([0-9]+(\.[0-9]*)?|\.[0-9]+)((e|E)(\+|-)?[0-9]+)?,.*)*(\+|-)?([0-9]+(\.[0-9]*)?|\.[0-9]+)((e|E)(\+|-)?[0-9]+)?"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:element name="attributes">
		<xs:annotation>
			<xs:documentation>
				Contain design parameters of a node or a sequence, called attribute buckets in XAL terminology.
			</xs:documentation>
		</xs:annotation>
		<xs:complexType>
	
			<xs:all>
				<xs:element name="align" minOccurs="0">
					<xs:annotation>
						<xs:documentation>
							Implementation: xal.smf.attr.AlignmentBucket<br/>
							An attribute set for alignment attributes (x, y, z, pitch, yaw, roll).
							These alignments are offsets in the local lattice coordinate system.
						</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:attribute name="x" type="xs:double">
							<xs:annotation>
								<xs:documentation>x is in the horizontal direction [mm]</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="y" type="xs:double">
							<xs:annotation>
								<xs:documentation>y is in the vertical direction [mm]</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="z" type="xs:double">
							<xs:annotation>
								<xs:documentation>z is in the longitudinal direction along the beam [mm]</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="pitch" type="xs:double">
							<xs:annotation>
								<xs:documentation>pitch is the rotation about x [mrad]</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="yaw" type="xs:double">
							<xs:annotation>
								<xs:documentation>yaw is the rotation about y [mrad]</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="roll" type="xs:double">
							<xs:annotation>
								<xs:documentation>roll is the rotation about z [mrad]</xs:documentation>
							</xs:annotation>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
				<xs:element name="rotation" minOccurs="0">
					<xs:annotation>
						<xs:documentation>
							Implementation: xal.smf.attr.RotationBucket<br/>
							An attribute set for rotation alignment attributes (pitch, yaw, roll).
							These alignments are offsets in the local lattice coordinate system.
						</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:attribute name="pitch" type="xs:double">
							<xs:annotation>
								<xs:documentation>pitch is the rotation about x [mrad]</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="yaw" type="xs:double">
							<xs:annotation>
								<xs:documentation>yaw is the rotation about y [mrad]</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="roll" type="xs:double">
							<xs:annotation>
								<xs:documentation>roll is the rotation about z [mrad]</xs:documentation>
							</xs:annotation>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
				<xs:element name="displacement" minOccurs="0">
					<xs:annotation>
						<xs:documentation>
							Implementation: xal.smf.attr.DisplaceBucket<br/>
							An attribute set for displacement alignment attributes (x, y, z).
							These alignments are offsets in the local lattice coordinate system.
						</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:attribute name="x" type="xs:double">
							<xs:annotation>
								<xs:documentation>x is in the horizontal direction
								</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="y" type="xs:double">
							<xs:annotation>
								<xs:documentation>y is in the vertical direction
								</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="z" type="xs:double">
							<xs:annotation>
								<xs:documentation>z is in the longitudinal direction along the beam </xs:documentation>
							</xs:annotation>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
				<xs:element name="magnet" minOccurs="0">
					<xs:annotation>
						<xs:documentation>
							Implementation: xal.smf.attr.MagnetBucket<br/>
							Attribute set for magnet information
						</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:attribute name="len" type="xs:double">
							<xs:annotation>
								<xs:documentation>the effective magnetic length [m]</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="dfltMagFld" type="xs:double">
							<xs:annotation>
								<xs:documentation>dfltMagField is the default field value (T for dipole, T/m for quad, etc.)</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="polarity">
							<xs:annotation>
								<xs:documentation>
									polarity - is the polarity flag/default polarity value.
									1 means	positive current = positive field. -1 means positive current = negative field
									<br />
								</xs:documentation>								
							</xs:annotation>
							<xs:simpleType>
								<xs:restriction base="xs:double">
									<xs:enumeration value="-1"/>
									<xs:enumeration value="1"/>
									<xs:enumeration value="-1.0"/>
									<xs:enumeration value="1.0"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
						<xs:attribute name="bendAngle" type="xs:double">
							<xs:annotation>
								<xs:documentation>dipole bend angle (in degrees)</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="multFieldNorm" type="doubleArrayType">
							<xs:annotation>
								<xs:documentation>
									normal field components<br/> 
									- multFieldNorm - is an array of the normal	direction multipole components
									 element n is the n'th pole field level	over the primary field where n=0 for dipole, n=1 for quad, ...
								</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="multFieldSkew" type="doubleArrayType">
							<xs:annotation>
								<xs:documentation>skew field components - is the same as multFieldNorm, but is for the skew direction
								</xs:documentation>
							</xs:annotation>
						</xs:attribute>

						<xs:attribute name="pathLength" type="xs:double">
							<xs:annotation>
								<xs:documentation>path length (in m)</xs:documentation>
							</xs:annotation>
						</xs:attribute>

						<xs:attribute name="dipoleEntrRotAngle" type="xs:double">
							<xs:annotation>
								<xs:documentation>dipole rotation angle for entrance pole face (in degrees)</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="dipoleExitRotAngle" type="xs:double">
							<xs:annotation>
								<xs:documentation>dipole rotation angle for exit pole face (in degrees)</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="dipoleQuadComponent" type="xs:double">
							<xs:annotation>
								<xs:documentation>quadrupole component for bend dipole</xs:documentation>
							</xs:annotation>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
				<xs:element name="aperture" minOccurs="0">
					<xs:annotation>
						<xs:documentation>
							Implementation: xal.smf.attr.ApertureBucket<br/>
						</xs:documentation>
					</xs:annotation>					
					<xs:complexType>
						<xs:attribute name="x" type="xs:double" use="required"/>
						<xs:attribute name="y" type="xs:double"/>
						<xs:attribute name="shape">
							<xs:annotation>
								<xs:documentation>iUnkown = 0; iEllipse	= 1; iRectangle = 2; iDiamond = 3; int iIrregular = 11;</xs:documentation>
							</xs:annotation>
							<xs:simpleType>
								<xs:restriction base="xs:byte">
									<xs:enumeration value="0"/>
									<xs:enumeration value="1"/>
									<xs:enumeration value="2"/>
									<xs:enumeration value="3"/>
									<xs:enumeration value="11"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
				<xs:element name="rfgap" minOccurs="0">
					<xs:annotation>
						<xs:documentation>
							Implementation: xal.smf.attr.RfGapBucket<br/>
							A set of RF gap attributes.<br/>
							This bucket contains information about a specific gap withing a resonating cavity such as a DTL or CCL,
							which is driven by a common RF source.
						</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:attribute name="length" type="xs:double" use="required">
							<xs:annotation>
								<xs:documentation>The length is the length of the gap (m)</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="phaseFactor" type="xs:double" use="required">
							<xs:annotation>
								<xs:documentation>the ratio of the RF phase in the gap over the	phase in the first gap </xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="ampFactor" type="xs:double" use="required">
							<xs:annotation>
								<xs:documentation>the ratio of the RF amplitude in the gap over the amplitude in the first gap</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="TTF" type="xs:double" use="required">
							<xs:annotation>
								<xs:documentation>The transit time factor of this gap</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="amp" type="doubleArrayType">
							<xs:annotation>
								<xs:documentation>the default amplitude (kV)</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="phase" type="doubleArrayType">
							<xs:annotation>
								<xs:documentation>the default phase (deg)</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="freq" type="doubleArrayType">
							<xs:annotation>
								<xs:documentation>the frequency (MHz)</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="endCell" use="required">
							<xs:annotation>
								<xs:documentation>flag for whether this is and end cell (i.e. uses the end cell TTFs)" </xs:documentation>								
							</xs:annotation>
							<xs:simpleType>
								<xs:restriction base="xs:byte">
									<xs:enumeration value="0"/>
									<xs:enumeration value="1"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
						<xs:attribute name="gapOffset" type="xs:double" use="required">
							<xs:annotation>
								<xs:documentation>the distance between the Electric and geometric center (E_ctr - G_ctr) (m)</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="testPhaseFactor" type="xs:double">
							<xs:annotation>
								<xs:documentation>the ratio of the RF phase in the gap over the	phase in the first gap </xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="testAmpFactor" type="xs:double">
							<xs:annotation>
								<xs:documentation>the ratio of the RF amplitude in the gap over the amplitude in the first gap</xs:documentation>
							</xs:annotation>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
				<xs:element name="rfcavity" minOccurs="0">
					<xs:annotation>
						<xs:documentation>
							Implementation: xal.smf.attr.RfCavityBucket<br/>
							A set of RF cavity attributes.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:attribute name="amp" type="xs:double" use="required">
							<xs:annotation>
								<xs:documentation>the default amplitude (kV)</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="phase" type="xs:double" use="required">
							<xs:annotation>
								<xs:documentation>the default phase (deg)</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="freq" type="xs:double">
							<xs:annotation>
								<xs:documentation>the frequency (MHz)</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="ampFactor" type="xs:double">
							<xs:annotation>
								<xs:documentation>calibration factor for klystron amplitude</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="phaseOffset" type="xs:double">
							<xs:annotation>
								<xs:documentation>calibration offset for beam - klystron phase</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="TTFCoefs" type="doubleArrayType">
							<xs:annotation>
								<xs:documentation>
									quadratic fit coefficients for the transit time factor 
									as a function of beta (constant, linear, quad)
								</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="TTFPrimeCoefs" type="doubleArrayType">
							<xs:annotation>
								<xs:documentation> quadratic fit coefficients for the transit time
									factor prime as a function of beta (constant, linear, quad)
								</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="STFCoefs" type="doubleArrayType">
							<xs:annotation>
								<xs:documentation>quadratic fit coefficients for the "S transit time factor" as a function
									of beta (constant, linear, quad)
								</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="STFPrimeCoefs" type="doubleArrayType">
							<xs:annotation>
								<xs:documentation>quadratic fit coefficients for the "S transit time factor" prime as
									a function of beta (constant, linear, quad)
								</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="TTF_endCoefs" type="doubleArrayType">
							<xs:annotation>
								<xs:documentation>quadratic fit coefficients for the transit time factor as a function
									of beta for the end cells (constant, linear, quad)
								</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="TTFPrime_EndCoefs" type="doubleArrayType">
							<xs:annotation>
								<xs:documentation>quadratic fit coefficients for the transit time factor prime as a function
									of beta for the end cells (constant, linear, quad)
								</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="STF_endCoefs" type="doubleArrayType">
							<xs:annotation>
								<xs:documentation>quadratic fit coefficients for the "S transit time factor" as a function
									of beta for the end cells (constant, linear, quad)
								</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="STFPrime_endCoefs" type="doubleArrayType">
							<xs:annotation>
								<xs:documentation>quadratic fit coefficients for the "S transit time factor" prime as
									a function of beta for the end cells (constant, linear, quad)
								</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="structureMode">
							<xs:annotation>
								<xs:documentation>flag for the structure type (0 or pi mode)</xs:documentation>
							</xs:annotation>
							<xs:simpleType>
								<xs:restriction base="xs:double">
									<xs:enumeration value="0"/>
									<xs:enumeration value="1"/>
									<xs:enumeration value="0.0"/>
									<xs:enumeration value="1.0"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
						<xs:attribute name="qLoaded" type="xs:double">
							<xs:annotation>
								<xs:documentation>quality factor with all external contribution</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="structureTTF" type="xs:double">
							<xs:annotation>
								<xs:documentation>TTF used in the real accelerator LLRF</xs:documentation>
							</xs:annotation>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
				<xs:element name="bpm" minOccurs="0">
					<xs:annotation>
						<xs:documentation>
							Implementation: xal.smf.attr.BPMBucket<br/>
						</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:attribute name="frequency" type="xs:double" use="required">
							<xs:annotation>							
								<xs:documentation>the phase frequency (MHz)</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="length" type="xs:double" use="required">
							<xs:annotation>
								<xs:documentation>stripline	length (m)</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="orientation" use="required">
							<xs:annotation>
								<xs:documentation>leads come in up (1) or downstream (-1)</xs:documentation>
							</xs:annotation>
							<xs:simpleType>
								<xs:restriction base="xs:byte">
									<xs:enumeration value="-1"/>
									<xs:enumeration value="1"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
				<xs:element name="sequence" minOccurs="0">
					<xs:annotation>
						<xs:documentation>
							Implementation: xal.smf.attr.SequenceBucket<br/>
							A bucket to hold Information about sequences. 
							In particular, how long the sequence is, and allowed predecessor sequences.
						</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:attribute name="predecessors" type="xs:string" use="required">
							<xs:annotation>
								<xs:documentation>can have at most 2 predecessors</xs:documentation>
							</xs:annotation>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
				<xs:element name="twiss" minOccurs="0">
					<xs:annotation>
						<xs:documentation>
							Implementation: xal.smf.attr.TwissBucket<br/>
						</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:attribute name="x" type="xs:double" use="required">
							<xs:annotation>							
								<xs:documentation>x</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="y" type="xs:double" use="required">
							<xs:annotation>							
								<xs:documentation>y</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="ax" type="xs:double" use="required">
							<xs:annotation>							
								<xs:documentation>alpha x</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="bx" type="xs:double" use="required">
							<xs:annotation>							
								<xs:documentation>beta x</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="ex" type="xs:double" use="required">
							<xs:annotation>							
								<xs:documentation>emit x</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="ay" type="xs:double" use="required">
							<xs:annotation>							
								<xs:documentation>alpha y</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="by" type="xs:double" use="required">
							<xs:annotation>							
								<xs:documentation>beta y</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="ey" type="xs:double" use="required">
							<xs:annotation>							
								<xs:documentation>emit y</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="az" type="xs:double" use="required">
							<xs:annotation>							
								<xs:documentation>alpha z</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="bz" type="xs:double" use="required">
							<xs:annotation>							
								<xs:documentation>beta z</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="ez" type="xs:double" use="required">
							<xs:annotation>							
								<xs:documentation>emit z</xs:documentation>
							</xs:annotation>
						</xs:attribute>							
						<xs:attribute name="etx" type="xs:double" use="required">
							<xs:annotation>							
								<xs:documentation>eta x</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="etpx" type="xs:double" use="required">
							<xs:annotation>							
								<xs:documentation>eta px</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="ety" type="xs:double" use="required">
							<xs:annotation>							
								<xs:documentation>eta y</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="etpy" type="xs:double" use="required">
							<xs:annotation>							
								<xs:documentation>eta py</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="mux" type="xs:double" use="required">
							<xs:annotation>							
								<xs:documentation>mu x</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="muy" type="xs:double" use="required">
							<xs:annotation>							
								<xs:documentation>mu y</xs:documentation>
							</xs:annotation>
						</xs:attribute>
	
					</xs:complexType>
				</xs:element>
			</xs:all>
		</xs:complexType>
	</xs:element>
	<xs:element name="channelsuite">
		<xs:complexType>
			<xs:choice maxOccurs="unbounded">
				<xs:element name="channel" minOccurs="0">
					<xs:complexType>
						<xs:attribute name="handle" type="xs:string" use="required" /> <!--  TODO: this enumeration may be restricted -->
						<xs:attribute name="signal" type="xs:string" />
						<xs:attribute name="settable" type="xs:boolean" />
						<xs:attribute name="valid" type="xs:boolean" />
						<xs:attribute name="transform" type="xs:string" />
						<xs:attribute name="mod-comment" type="xs:string" />
					</xs:complexType>
				</xs:element>
				<xs:element name="transform" minOccurs="0">
					<xs:complexType>
						<xs:attribute name="name" type="xs:string" use="required" />
						<xs:attribute name="type" use="required">
							<xs:simpleType>
								<xs:restriction base="xs:string">
									<xs:enumeration value="doubleScale" />
									<xs:enumeration value="doubleTranslation" />
									<xs:enumeration value="doubleLinear" />
									<xs:enumeration value="doubleArrayScale" />
									<xs:enumeration value="doubleArrayTranslation" />
									<xs:enumeration value="doubleArrayLinear" />
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
						<xs:attribute name="scale" type="xs:double" />
						<xs:attribute name="offset" type="xs:double" />
					</xs:complexType>
				</xs:element>
			</xs:choice>
			<xs:attribute name="name" type="xs:string">
				<xs:annotation>
					<xs:documentation>not used </xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
		<xs:key name="channel-handle">
			<xs:selector xpath="channel" />
			<xs:field xpath="@handle" />
		</xs:key>
		<xs:key name="transform-name">
			<xs:selector xpath="transform" />
			<xs:field xpath="@name" />
		</xs:key>
		<xs:keyref name="channel-transform" refer="transform-name">
			<xs:selector xpath="channel" />
			<xs:field xpath="@transform" />
		</xs:keyref>
	</xs:element>
	<xs:element name="powersupplies">
	<xs:annotation>
		<xs:documentation>
			Implementation: xal.smf.impl.MagnetMainSupply, xal.smf.impl.MagnetTrimSupply<br/>
				
			Power supplies element contains list of power supplies. 
			Each is described in ps element by unique identifier, type which can be either main or trim, and corresponding channel suite and.
			
			The optics file contains a single instance of the powersupplies element, although this single element is typically a large listing. 
			This element usually occurs at the end of the optics file, after all the sequence elements are defined. 
			Located under the powersupplies element is a listing of all the power supplies used in the accelerator description. 
			The direct children are ps elements, which describe the actual power supplies. 
			Each ps element contains a channelsuite entry listing all the channels connected to that supply.
		</xs:documentation>
	</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="ps" maxOccurs="unbounded">
					<xs:complexType>
						<xs:sequence minOccurs="1" maxOccurs="1">
							<xs:element ref="channelsuite" />
						</xs:sequence>
						<xs:attribute name="id" type="xs:string" use="required" />
						<xs:attribute name="type" use="required">
							<xs:simpleType>
								<xs:restriction base="xs:string">
									<xs:enumeration value="main" />
									<xs:enumeration value="trim" />
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
		<xs:key name="powersupply-id">
			<xs:selector xpath="ps" />
			<xs:field xpath="@id" />
		</xs:key>
	</xs:element>
</xs:schema>
