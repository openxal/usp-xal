/**
 * ScanConfigPanel.java
 *
 *  Created	: Nov 12, 2009
 *  Author      : Christopher K. Allen 
 */
package xal.app.pta.view.devcfg;

import xal.app.pta.IConfigView;
import xal.app.pta.MainApplication;
import xal.app.pta.MainConfiguration;
import xal.app.pta.rscmgt.AppProperties;
import xal.app.pta.rscmgt.DeviceProperties;
import xal.app.pta.tools.logging.IEventLogger;
import xal.app.pta.tools.swing.BndNumberTextField;
import xal.app.pta.tools.swing.NumberTextField.FMT;
import xal.app.pta.view.devcfg.DeviceConfigBasePanel.EventListener.EVENT;
import xal.ca.BadChannelException;
import xal.ca.Channel;
import xal.ca.ConnectionException;
import xal.ca.GetException;
import xal.ca.PutException;
import xal.smf.NoSuchChannelException;
import xal.smf.impl.WireScanner;
import xal.smf.impl.profile.ParameterSet;
import xal.smf.impl.profile.ProfileDevice;
import xal.smf.scada.BadStructException;
import xal.smf.scada.ScadaFieldDescriptor;

import java.awt.Component;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.lang.reflect.Field;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.TitledBorder;

/**
 * <p>
 * Base class that provides boiler plate functionality for a GUI panel displaying 
 * and managing hardware parameters from <code>{@link WireScanner}</code> devices.
 * The parameter sets are derived from the 
 * <code>{@link xal.smf.impl.WireScanner.ParameterSet}</code>
 * base class, the actual type being the parameter <code>PSet</code> of this class.
 * </p>
 * <p>
 * <h4>NOTE:</h4>
 * This class does not manage boolean parameter, which are typically status flags
 * for a controller condition.  Thus, the list of field descriptors passed by the
 * child class with the abstract method 
 * <code>{@link DeviceConfigBasePanel#getParamDescriptors()}</code> should only contain
 * numeric parameters.
 * </p>
 * 
 * <p>
 * <b>Ported from XAL on Jul 18, 2014.</b><br>
 * &middot; Jonathan M. Freed
 * </p>
 *
 * @param <PSet>        parameter set class - derived from <code>WireScanner.ParameterSet</code> 
 *
 * @since  Nov 12, 2009
 * @author Christopher K. Allen
 */
public abstract class DeviceConfigBasePanel<PSet extends ParameterSet> extends JPanel implements IConfigView {


    
    /*
     * Abstract Methods
     */

    /**
     * Returns the title used for the panel.
     *
     * @return  panel title
     * 
     * @since  Jan 14, 2010
     * @author Christopher K. Allen
     */
    abstract public String   getTitle();
    
    /**
     * <p>
     * Get the ordered list of PV field descriptors that describe the
     * data fields of the <code>PSet</code> data structure.
     * The data structure contains a related set of hardware
     * parameters.
     * </p>
     * <p>
     * <h4>NOTES:</h4>
     * &middot; This should really be a static method because this list needs
     * to be available at construction time.  However, you cannot have static
     * abstract methods.  The other option is to declare this method 
     * <code>static</code> and expect the base class to override.
     * <br/>
     * &middot; This class does not manage boolean parameter, which are typically status flags
     * for a controller condition.  Thus, the list of field descriptors passed by the
     * child class here should only contain numeric parameters.
     * </p>
     *
     * @return  set of field descriptors for the <code>PSet</code> data structure
     * 
     * @since  Jan 12, 2010
     * @author Christopher K. Allen
     */
    abstract public List<ScadaFieldDescriptor>      getParamDescriptors();
    
    
    /**
     * Return a fully populated <code>PSet</code> data structure.
     * The field values are taken from the parameters of the given
     * hardware device. 
     *
     * @param smfDev        hardware device from which parameters are obtained
     * 
     * @return          data structure containing hardware parameter set
     * 
     * @throws ConnectionException unable to connect parameter read back channel
     * @throws GetException        general field initialization exception 
     *
     * @since  Jan 12, 2010
     * @author Christopher K. Allen
     */
    abstract public PSet getDeviceParameters(ProfileDevice smfDev) throws ConnectionException, GetException;

    
    
    /*
     * Internal Classes
     */
    
    /**
     * Derived classes and others can use this interface to catch
     * supported events generated by this class.
     *
     * @since  Jan 16, 2010
     * @author Christopher K. Allen
     */
    public interface EventListener {
        
        /**
         * Enumeration of supported class events
         *
         * @since  Jan 16, 2010
         * @author Christopher K. Allen
         */
        public enum EVENT {
            /**  The <code>clearDevice()</code> methods was called */
            CLEARDEV,
            
            /**  The <code>setDevice()</code> methods was called */
            SETDEV;
        }
        
        /**
         * This method is called by this class when the given
         * event occurs.
         *
         * @param evt   the event which occurred in this class
         * @param ws    the wire scanner being displayed while the event happened
         * 
         * @since  Jan 16, 2010
         * @author Christopher K. Allen
         */
        public void eventAction(EVENT evt, ProfileDevice ws);
    }
    
    
    
    
    
    /*
     * Global Constants
     */
    
    /**  Serialization version */
    private static final long serialVersionUID = 1L;
    
    /** Time out to use when checking connections to the device */
    protected static final double DBL_TMO_CONNTEST = AppProperties.DEVICE.TMO_CONNTEST.getValue().asDouble();
    
    /** 
     * Time delay used when setting new values - i.e., #setDeviceVals(). 
     * Necessary for CrapView to process new values and reflect on the IOC get side. 
     */
    protected static final int      INT_CAPUT_DELAY = AppProperties.DEVICE.LATENCY_PUT.getValue().asInteger();
    
    
    
    /**  Number of columns in the input text fields */
    protected static final int CNT_COLS = AppProperties.TEXTFLD.COLS.getValue().asInteger();

    /**  Size of the horizontal struts separating text fields from labels */
    protected static final int INT_PAD_HOR = AppProperties.TEXTFLD.PADX.getValue().asInteger();

    /**  Size of the vertical struts separating the GUI components */
    protected static final int INT_PAD_VER = AppProperties.TEXTFLD.PADY.getValue().asInteger();

    
    
    /*
     * Local Attributes
     */
    
    
    /*
     * Data
     */
    
    /** Data type of the PV DAQ/CTRL packet */
    private final Class<PSet>       clsDataType;
    
    
    /** The current profile device */
    private ProfileDevice             smfDevice;
    
    /** Parameter set data structure used to pass parameter values */
    private PSet                    datParamSet;

    /** Map of the device parameters to manage */
    private final Map<ScadaFieldDescriptor, BndNumberTextField>   mapValFlds;
    
    /** Map of device parameters to the range labels */
    private final Map<ScadaFieldDescriptor, JLabel>               mapRngLbls;

    
    /*
     * Events
     */
    
    /** List of action listener class events */
    private final List<EventListener>   lstEvtLsn;

    
    
    /*
     * GUI Components
     */

    /** The layout manager constraint object */
    private GridBagConstraints      gbcTxtFlds;

    /** The Swing layout manager for the GUI */
    private GridBagLayout           lmgGui;
    
    /** Apply GUI parameters to hardware button */
    private JButton                 butApply;
    
    /** Refresh GUI display from hardware parameters button */
    private JButton                 butRefresh;

    /** Ordered list of GUI components (used for insertion) */
    private final List<Component>   lstGuiCmps;
    
    
    
    
    /*
     * Initialization
     */
    
    
    /**
     * Create a new <code>DaqConfigPanel</code> object which
     * displays the DAQ configurations for the device provided
     * in the {@link #setDevice(WireScanner)} method.
     *
     * @param clsDataType   parameter set class type - derived from 
     *                        <code>{@link xal.smf.impl.WireScanner.ParameterSet}</code> 
     *  
     * @since     Nov 12, 2009
     * @author    Christopher K. Allen
     */
    public DeviceConfigBasePanel(Class<PSet> clsDataType) {
        this.clsDataType = clsDataType;
        
        this.smfDevice   = null;
        this.datParamSet = null;
        
        this.mapValFlds  = new HashMap<ScadaFieldDescriptor, BndNumberTextField>();
        this.mapRngLbls  = new HashMap<ScadaFieldDescriptor, JLabel>();
        
        this.lstEvtLsn  = new LinkedList<EventListener>();
        this.lstGuiCmps = new LinkedList<Component>();
        
        this.initLayout();
        this.initGuiComponents();
        this.buildGuiPanel();
        this.initActions();
    }
    
    
    
    /*
     * Operations
     */
    
    /**
     * Register given call-back object to received the
     * supported events generated by this class.
     *
     * @param lsnEvt    object to receive event notifications
     * 
     * @since  Jan 16, 2010
     * @author Christopher K. Allen
     */
    public void registerEventListener(EventListener lsnEvt) {
        this.lstEvtLsn.add(lsnEvt);
    }
    
    /**
     * Attached the given device to the panel and displays
     * its scan configuration parameters.
     *
     * @param smfDev    the new wire scanner device to be configured
     * 
     * @since  Nov 13, 2009
     * @author Christopher K. Allen
     */
    public void setDevice(ProfileDevice smfDev) {

//        System.out.println("DeviceConfigBase#setDevice: smfDev = " + smfDev);
        
        // Check that the given wire scanner is not null
        if (smfDev == null) 
            return;
        
        // Set the attached device
        this.smfDevice = smfDev;
        
        
        
        // Get the device parameters for this data set and display them
        //  on the GUI.
        try {
            this.datParamSet = this.getDeviceParameters(smfDev);
            
            this.displayParameterVals(this.datParamSet);
            
            this.retreiveDeviceRngs(smfDev);
            
            for (EventListener lsn : this.lstEvtLsn)
                lsn.eventAction(EVENT.SETDEV, smfDev);

            this.repaint();
            
        } catch (ConnectionException e) {
            appLogger().logException(this.getClass(), e, "unable to connect to " + smfDev.getId()); //$NON-NLS-1$
            e.printStackTrace();

        } catch (GetException e) {
            appLogger().logException(this.getClass(), e, "General CA GET failure for " + smfDev.getId()); //$NON-NLS-1$
            e.printStackTrace();
            
        } catch (NoSuchChannelException e) {
            appLogger().logException(this.getClass(), e, "Unknown channel for " + smfDev.getId()); //$NON-NLS-1$
            e.printStackTrace();
        }
    }
    
    /**
     * Clears the GUI display to zero
     * for all parameters.
     *
     * 
     * @since  Nov 18, 2009
     * @author Christopher K. Allen
     */
    public void clearDevice() {
        for (Map.Entry<ScadaFieldDescriptor, BndNumberTextField> entry: mapValFlds.entrySet()) {
            BndNumberTextField fldParam = entry.getValue();
            
            fldParam.clearDisplay();
        }
        
        for (EventListener lsn : this.lstEvtLsn)
            lsn.eventAction(EVENT.CLEARDEV, this.smfDevice);

        this.smfDevice = null;
        this.datParamSet = null;
    }
    
    /**
     * Refreshes the GUI display with parameter values taken
     * directly from the machine hardware.
     *
     * 
     * @since  Apr 14, 2010
     * @author Christopher K. Allen
     */
    public void refreshDisplay()  {
        
        if (this.smfDevice == null)
            return;
        
        try {
            this.datParamSet = this.getDeviceParameters(this.smfDevice);
            
//            System.out.println("DeviceConfigBase#refreshDisplay: this.datParamSet");
//            System.out.println(this.datParamSet);
            
            this.displayParameterVals(this.datParamSet);
            
        } catch (ConnectionException e) {
            appLogger().logException(getClass(), e, "Could not acquire parameters for " + smfDevice.getId()); //$NON-NLS-1$
            
        } catch (GetException e) {
            appLogger().logException(getClass(), e, "Could not acquire parameters for " + smfDevice.getId()); //$NON-NLS-1$
            
        }
    }

    /**
     * Performs connection test for the current wire scanner 
     * device.  Specifically, all the channels necessary to 
     * populate the SCADA data structure <code>PSet</code>
     * are checked for connection.
     *
     * @return      <code>true</code> if all channels check out for above device,
     *              <code>false</code> if the <code>PSet</code> structure is bad, 
     *                                 or at least one connection is missing,
     *                                 or there is no default device specified
     *
     * @author Christopher K. Allen
     * @since  Feb 16, 2011
     */
    public boolean connectionTest() {
        if (this.smfDevice == null)
            return false;
        
        return this.connectionTest(this.smfDevice);
    }

    /**
     * Performs connection test for the given
     * device.  Specifically, all the channels necessary to 
     * populate the SCADA data structure <code>PSet</code>
     * are checked for connection.
     *
     * @param smfDev    device we are checking
     * 
     * @return      <code>true</code> if all channels check out for above device,
     *              <code>false</code> if the <code>PSet</code> structure is bad 
     *                                 or at least one connection is missing
     *
     * @author Christopher K. Allen
     * @since  Feb 16, 2011
     */
    public boolean connectionTest(ProfileDevice smfDev) {
        try {
            boolean bolConnect = smfDev.testConnection(this.clsDataType, DBL_TMO_CONNTEST); 

            if (!bolConnect) {

                this.appLogger().logWarning(getClass(), "Unable to connect to device " + smfDev.getId() + " for paramters in " + this.clsDataType); //$NON-NLS-1$ //$NON-NLS-2$
                return false;
            }
            
        } catch (BadStructException e) {
            this.appLogger().logException(getClass(), e, " for device " + smfDev.getId() + " for parameter " + this.clsDataType); //$NON-NLS-1$ //$NON-NLS-2$
            return false;

        } catch (BadChannelException e) {
            this.appLogger().logException(getClass(), e, " for device " + smfDev.getId() + " for parameter " + this.clsDataType); //$NON-NLS-1$ //$NON-NLS-2$
            return false;
            
        }
        
        return true;
    }
    
    
    /**
     * Returns the application's main event logger object.
     *
     * @return  application logger 
     * 
     * @since  Dec 18, 2009
     * @author Christopher K. Allen
     */
    public IEventLogger        appLogger() {
        return MainApplication.getEventLogger();
    }

    
    /*
     * IConfigView Interface
     */
    
    
    /**
     * Refresh the display to reflect any changes in the device parameters that we
     * display.
     * 
     * @param   cfgMain     main machine configuration
     * 
     * @since Aug 7, 2012
     * @see xal.app.pta.IConfigView#updateConfiguration(xal.app.pta.MainConfiguration)
     */
    @Override
    public void updateConfiguration(MainConfiguration cfgMain) {
        this.refreshDisplay();
    }

    /**
     * Clear out the displayed device - no longer valid.
     * 
     * @since Aug 7, 2012
     * @see xal.app.pta.IConfigView#updateAccelerator(xal.app.pta.MainConfiguration)
     */
    @Override
    public void updateAccelerator(MainConfiguration cfgMain) {
        this.clearDevice();
    }

    
    /*
     * GUI Construction
     */
    
    /** 
     * Gets the numeric field GUI component for the given field
     * descriptor.
     * 
     * @param   fd  field descriptor identifying the text field (text field displays this PV)
     *  
     * @return  the text field corresponding to the PV described in the argument 
     * 
     * 
     */
    BndNumberTextField getGuiNumberFieldFrom(ScadaFieldDescriptor fd) {
        BndNumberTextField  txtFld = this.mapValFlds.get(fd);
        
        return txtFld;
    }
    
    /**
     * Returns the currently selected wire scanner device.
     *
     * @return  the wire scanner being configured, or <code>null</code> if none
     *          is currently selected
     *
     * @author Christopher K. Allen
     * @since  Nov 4, 2011
     */
    protected ProfileDevice   getCurrentProfileDevice() {
        return this.smfDevice;
    }
    
    /**
     * Adds the given GUI component to the top of the 
     * panel.
     *
     * @param cmpNew    new GUI component to display
     * 
     * @since  Jan 15, 2010
     * @author Christopher K. Allen
     */
    protected void insertComponentTop(Component cmpNew) {

        Component       cmpTop = this.lstGuiCmps.get(0);
        
        this.insertComponentAt(cmpNew, cmpTop);
    }
    
    /**
     * Adds the given GUI component to the bottom of the
     * panel.
     *
     * @param cmpNew    new GUI component to display
     * 
     * @since  Jan 15, 2010
     * @author Christopher K. Allen
     */
    protected void insertComponentBottom(Component cmpNew) {

        int         indLast = this.lstGuiCmps.size() - 1;
        Component   cmpLast = this.lstGuiCmps.get( indLast );
        
        this.insertComponentAt(cmpNew, cmpLast);
    }
    
    /**
     * Adds the given GUI component to the location
     * currently occupied by the given (i.e., "index") component.
     * All other components below the index component are pushed
     * toward the bottom, including the index component itself.
     *
     * @param cmpNew    new GUI component to display
     * @param cmpLoc    existing GUI component located where new one will display 
     * 
     * @since  Jan 15, 2010
     * @author Christopher K. Allen
     */
    protected void insertComponentAt(Component cmpNew, Component cmpLoc) {
        // Set up the grid constraints for insertion
        GridBagConstraints      gbcInsert = this.lmgGui.getConstraints(cmpLoc);
        gbcInsert.anchor  = GridBagConstraints.LINE_START;
        gbcInsert.weighty = 0.0;
        
        Component               cmpPad = Box.createVerticalStrut( INT_PAD_VER ); 

        // Add the new component and its padding
        this.add(cmpNew, gbcInsert);
        gbcInsert.gridy++;
        this.add( cmpPad, gbcInsert);
        
        // Push all components below the insertion point down two rows 
        int                     indInsert = this.lstGuiCmps.indexOf(cmpLoc);
        int                     indTail   = this.lstGuiCmps.size();
        List<Component>         lstStack  = this.lstGuiCmps.subList(indInsert, indTail);
        for (Component cmp : lstStack) {
            GridBagConstraints  gbc = this.lmgGui.getConstraints(cmp);
            
            gbc.gridy += 2;
            this.lmgGui.setConstraints(cmp, gbc);
        }
        
        // Insert the new component, and its padding strut, in the component list at the proper position
        this.lstGuiCmps.add(indInsert, cmpPad);
        this.lstGuiCmps.add(indInsert, cmpNew);
    }
    

    /*
     * Events
     */
    
    /**
     * Gets the range of values allowed for the PV according to the
     * EPICS HiHi and LoLo fields, or to the parameter ranged specified
     * in the <code>{@link DeviceProperties#STR_FILE_CONFIG}</code> file.  
     * The actually values used depends upon the application property
     * <code>{@link xal.app.pta.rscmgt.AppProperties.DEVICE#EPICS_LMTS}</code>.
     * Then these values are displayed as the limiting
     * values next to the labels of the wire scanner parameters on
     * the GUI.
     *
     * @param ws    device whose limit values we are using
     *
     * @author Christopher K. Allen
     * @since  Jan 25, 2011
     * 
     * @see DeviceProperties#STR_FILE_CONFIG
     * @see xal.app.pta.rscmgt.AppProperties.DEVICE
     */
    protected void retreiveDeviceRngs(ProfileDevice ws) {
        for (ScadaFieldDescriptor pvd : this.getParamDescriptors()) {
            String          strHnd = pvd.getSetHandle();
            Class<?>        clsTyp = pvd.getPvType();
            
            if (clsTyp == String.class)
                continue;
            

            // Set the range of values for the parameter
            Number      numMin;
            Number      numMax;
            
            boolean     bolEpicsLimits = AppProperties.DEVICE.EPICS_LMTS.getValue().asBoolean();
            
            if (bolEpicsLimits == false) {  // Use the default application values

                Class<?>        clsType = DeviceProperties.getType(pvd);

                if (clsType == Integer.class) {

                    numMin = DeviceProperties.getMinLimit(pvd).asInteger();
                    numMax = DeviceProperties.getMaxLimit(pvd).asInteger();

                } else if (clsType == Double.class) {

                    numMin = DeviceProperties.getMinLimit(pvd).asDouble();
                    numMax = DeviceProperties.getMaxLimit(pvd).asDouble();

                } else {

                    numMin = DeviceProperties.getMinLimit(pvd).asDouble();
                    numMax = DeviceProperties.getMaxLimit(pvd).asDouble();

                }
                
            } else {                // Get the values from the EPICS record

                try {
                    Channel         chnFld = ws.getAndConnectChannel(strHnd);

                    numMax = chnFld.upperControlLimit();
                    numMin = chnFld.lowerControlLimit();

                } catch (ConnectionException e) {
                    String  strErrMsg = "Unable to connect to device " + ws.getId() + //$NON-NLS-1$
                    " while trying read PV limits for " + strHnd;  //$NON-NLS-1$

                    MainApplication.getEventLogger().logError(this.getClass(), strErrMsg);
                    continue;

                } catch (GetException e) {
                    String  strErrMsg = "Unable to connect to device " + ws.getId() + //$NON-NLS-1$
                    " while trying read PV limits for " + strHnd;  //$NON-NLS-1$

                    MainApplication.getEventLogger().logError(this.getClass(), strErrMsg);
                    continue;
                }
            }
            
            BndNumberTextField  txtFld = this.mapValFlds.get(pvd);
            JLabel              lblRng = this.mapRngLbls.get(pvd);

            txtFld.setMinValue(numMin);
            txtFld.setMaxValue(numMax);

            String      strRng = txtFld.makeIntervalLabel() + "   "; //$NON-NLS-1$
            lblRng.setText(strRng);
        }
        
    }
    
    /*
     * Events
     */
    
    /**
     * Applies the values (specified by the user) taken
     * from the text fields of the GUI.  Specifically,
     * the text fields are read, then a data structure
     * is created, populated with those values, and then
     * the structure is sent to the hardware device.
     * 
     * @return  the set of configuration parameter that was sent to the device,
     *          or <code>null</code> if we were unable to send them
     * 
     * @since  Nov 13, 2009
     * @author Christopher K. Allen
     */
    protected PSet setDeviceVals() {
    
        if (this.smfDevice == null)
            return null;
        
        try {
            PSet setParams = this.retreiveParamValsFromGui();
            if (setParams == null)
                return null;
    
//            System.out.println("DeviceConfigBase#setDeviceVals() - setParams = " + setParams.toString());
//            System.out.println();
            
            // Set the device parameters then flag the configuration object
            //  that the configuration has changed
            this.smfDevice.configureHardware(setParams);
            
            // Allow LabView time to process the new values from the IOC (major kluge)
            Thread.sleep(INT_CAPUT_DELAY);

            MainConfiguration.getInstance().setDirty(this, this.smfDevice);
            
            return setParams;
            
        } catch (ConnectionException e) {
            appLogger().logError(this.getClass(), "Unable to connect to device " + this.smfDevice.getId()); //$NON-NLS-1$
            return null;
    
        } catch (PutException e) {
            appLogger().logError(this.getClass(), "General CA PUT error for device " + this.smfDevice.getId()); //$NON-NLS-1$
            return null;
            
        } catch (NoSuchChannelException e) {
            appLogger().logError(this.getClass(), "Unknown channel for device " + this.smfDevice.getId()); //$NON-NLS-1$
            return null;
            
        } catch (InterruptedException e) {
            appLogger().logError(this.getClass(), "Thread interrupt while waiting for put completion for device " + this.smfDevice.getId()); //$NON-NLS-1$
            return null;
        }
    }

    /**
     * Display the current configuration parameters on
     * the GUI face.
     *
     * @param setVals    set of device configuration parameters
     * 
     * @since  Nov 13, 2009
     * @author Christopher K. Allen
     */
    protected void displayParameterVals(PSet setVals) {
        
//        System.out.println("DeviceConfigBase#displayParameterVals: setVals = ");
//        System.out.println(setVals);
//        Thread.dumpStack();
        
        for (ScadaFieldDescriptor dscFld : this.getParamDescriptors()) {
            try {
                BndNumberTextField guiInput = this.mapValFlds.get(dscFld);
    
                Class<?>    clsPSet    = setVals.getClass();
                String      strFldName = dscFld.getFieldName();
                Field       fldParam   = clsPSet.getField(strFldName);
                Class<?>    clsFldType = fldParam.getType();
    
                if (clsFldType==int.class || clsFldType==Integer.class) {
                    Integer intVal = fldParam.getInt(setVals);
                    guiInput.setDisplayValueSilently(intVal);
    
                } else if (clsFldType==double.class || clsFldType==Double.class) {
                    Double dblVal = fldParam.getDouble(setVals);
                    guiInput.setDisplayValueSilently(dblVal);
    
                } else {
                    Double dblVal = fldParam.getDouble(setVals);
                    guiInput.setDisplayValueSilently(dblVal);
    
                }
    
            } catch (NoSuchFieldException e) {
                this.appLogger().logException(this.getClass(), e, 
                                "Unknown field " + dscFld.getFieldName() +  //$NON-NLS-1$
                                " in parameter set " + this.datParamSet.getClass().getName() //$NON-NLS-1$
                            );
    
            } catch (IllegalArgumentException e) {
                this.appLogger().logException(this.getClass(), e, 
                                "The field " + dscFld.getFieldName() +  //$NON-NLS-1$
                                " is not in parameter set " + this.datParamSet.getClass().getName() //$NON-NLS-1$
                            );
                
            } catch (IllegalAccessException e) {
                this.appLogger().logException(this.getClass(), e, 
                                "The field " + dscFld.getFieldName() +  //$NON-NLS-1$
                                " is not public in parameter set " + this.datParamSet.getClass().getName() //$NON-NLS-1$
                            );
                
            }
    
        }
    
    }

    /**
     * Retrieves the user-specified parameters
     * from the GUI, creates the data structure,
     * populates the fields with the parameters
     * and returns it.
     * 
     * @return  the populated data structure, 
     *          or <code>null</code> if no attached device
     * 
     * @since  Nov 13, 2009
     * @author Christopher K. Allen
     */
    protected PSet        retreiveParamValsFromGui() {
        
        for (ScadaFieldDescriptor dscFld : this.getParamDescriptors()) {
            BndNumberTextField guiInput = this.mapValFlds.get(dscFld);

            try {
                Class<?>    clsPSet    = this.datParamSet.getClass();
                String      strFldName = dscFld.getFieldName();
                Field       fldParam   = clsPSet.getField(strFldName);
                Class<?>    clsFldType = fldParam.getType();

                if (clsFldType==byte.class || clsFldType==Byte.class) {
                    Byte        byteVal = guiInput.getDisplayValue().byteValue();
                    fldParam.set(this.datParamSet, byteVal);
                    
                } else if  (clsFldType==int.class || clsFldType==Integer.class) {
                    Integer intVal = guiInput.getDisplayValue().intValue();
                    fldParam.set(this.datParamSet, intVal);
                    
                } else if (clsFldType==float.class || clsFldType==Float.class) {
                    Float       fltVal = guiInput.getDisplayValue().floatValue();
                    fldParam.set(this.datParamSet, fltVal);

                } else if (clsFldType==double.class || clsFldType==Double.class) {
                    Double  dblVal = guiInput.getDisplayValue().doubleValue();
                    fldParam.set(this.datParamSet, dblVal);

                } else {
//                    Double  dblVal = guiInput.getDisplayValue().doubleValue();
//                    fldParam.set(this.setParamVals, dblVal);

                }

            } catch (NoSuchFieldException e) {
                this.appLogger().logException(this.getClass(), e, 
                                "Unknown field " + dscFld.getFieldName() +  //$NON-NLS-1$
                                " in parameter set " + datParamSet.getClass().getName() //$NON-NLS-1$
                            );

            } catch (IllegalArgumentException e) {
                this.appLogger().logException(this.getClass(), e, 
                                "The field " + dscFld.getFieldName() +  //$NON-NLS-1$
                                " is not in parameter set " + datParamSet.getClass().getName() //$NON-NLS-1$
                            );
                
            } catch (IllegalAccessException e) {
                this.appLogger().logException(this.getClass(), e, 
                                "The field " + dscFld.getFieldName() +  //$NON-NLS-1$
                                " is not public in parameter set " + datParamSet.getClass().getName() //$NON-NLS-1$
                            );
            }
        }
        
        return this.datParamSet;
    }

    
    
    /*
     * Support Methods
     */
    
    /**
     * Initialize the GUI layout of this panel.
     *
     * 
     * @since  Jan 26, 2010
     * @author Christopher K. Allen
     */
    private void        initLayout() {
        // Create the input field container
        this.lmgGui = new GridBagLayout(); 
        this.setLayout( this.lmgGui );
        
        this.gbcTxtFlds = new GridBagConstraints();
        this.gbcTxtFlds.anchor = GridBagConstraints.LINE_START;
        this.gbcTxtFlds.gridx = 0;
        this.gbcTxtFlds.gridy = 0;
    }
    
    /**
     * Create the GUI input text fields, ordered, for each configuration
     * parameter.
     *
     * 
     * @since  Jan 13, 2010
     * @author Christopher K. Allen
     */
    private void initGuiComponents() {
        List<ScadaFieldDescriptor> lstParamDscrs = this.getParamDescriptors();
        
        if (lstParamDscrs == null) {
            this.appLogger().logError(this.getClass(), 
                    "Serious Error: bad implementation of method getParamDescriptors()" //$NON-NLS-1$
                    );
            return;
        }
        
        for (ScadaFieldDescriptor dscParam : lstParamDscrs ) {
    
            // Get the display class type, the display format, and the numeric limits
            Class<?>        clsType = DeviceProperties.getType(dscParam);
            NumberFormat    fmtDspl = DeviceProperties.getDisplayFormat(dscParam);
    
            Number      numMin;
            Number      numMax;
            if (clsType == Integer.class) {
                
                numMin = DeviceProperties.getMinLimit(dscParam).asInteger();
                numMax = DeviceProperties.getMaxLimit(dscParam).asInteger();
                
            } else if (clsType == Double.class) {
                
                numMin = DeviceProperties.getMinLimit(dscParam).asDouble();
                numMax = DeviceProperties.getMaxLimit(dscParam).asDouble();
                
            } else {
                
                numMin = DeviceProperties.getMinLimit(dscParam).asDouble();
                numMax = DeviceProperties.getMaxLimit(dscParam).asDouble();
                
            }
            
            // Create the text field GUI display and set the display format
            int     cntCols = AppProperties.TEXTFLD.COLS.getValue().asInteger();
            
            BndNumberTextField txtFld = new BndNumberTextField(FMT.DEFAULT, cntCols, numMin, numMax);
            txtFld.setDisplayFormat(fmtDspl);
            
            this.mapValFlds.put(dscParam, txtFld);

            // Create the Label for the field with initial range
//            BndNumberTextField guiInput = this.mapValFlds.get(dscParam);
            String strFldRng = txtFld.makeIntervalLabel() + "    "; //$NON-NLS-1$
            JLabel lblFldRng = new JLabel(strFldRng);
            
            this.mapRngLbls.put(dscParam, lblFldRng);
        }
        
        // Make the buttons
        String          strApplyLbl   = " Apply"; //$NON-NLS-1$
        ImageIcon       icnUpdate     = AppProperties.ICON.APPLY.getValue().asIcon();
        this.butApply = new JButton( strApplyLbl, icnUpdate);
        
        String          strRefreshLbl = " Refresh"; //$NON-NLS-1$
        ImageIcon       icnRefresh    = AppProperties.ICON.REFRESH.getValue().asIcon();
        this.butRefresh = new JButton( strRefreshLbl, icnRefresh);
        
    }

    /**
     * Set the event actions for all the GUI input
     * fields and other components.
     *
     * 
     * @since  Nov 13, 2009
     * @author Christopher K. Allen
     */
    private void initActions() {
        
        // Create the Refresh button action then register it with button
        ActionListener  actRefresh = new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent arg0) {
                refreshDisplay();
            }
        };
        this.butRefresh.addActionListener(actRefresh);
        
        
        // Create the apply parameters event action
        ActionListener actApply = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                setDeviceVals();
            }
        };
        
        // Add action to force apply button
        this.butApply.addActionListener(actApply);

        // Add action to each GUI input text field 
        for (ScadaFieldDescriptor dscFld : this.getParamDescriptors()) {
            BndNumberTextField guiInput = this.mapValFlds.get(dscFld);
            
            guiInput.addActionListener(actApply);
        }
    }
    
    /**
     * Constructs the visible GUI panel.
     *
     * 
     * @since  Nov 13, 2009
     * @author Christopher K. Allen
     */
    private void buildGuiPanel() {
        // Create a [label - range - input] entry for each field
        for (ScadaFieldDescriptor dscFld : this.getParamDescriptors()) {
            String strFldLbl = DeviceProperties.getLabel(dscFld) + "  "; //$NON-NLS-1$
            JLabel lblFldLbl = new JLabel(strFldLbl);
            
            BndNumberTextField guiInput  = this.mapValFlds.get(dscFld);
            JLabel             lblFldRng = this.mapRngLbls.get(dscFld);

            Box         boxFld = Box.createHorizontalBox();
            boxFld.add(guiInput);
            boxFld.add(Box.createHorizontalStrut(INT_PAD_HOR));
            boxFld.add(lblFldLbl);
            boxFld.add(lblFldRng);
            
            this.appendGuiComponent(boxFld);
        }
        
        // Add the update button
        this.appendButtons();

        // Add a border with title
        this.setBorder( new TitledBorder( this.getTitle() ) );
    }


    /**
     * Appends the given GUI component to the 
     * bottom of the panel.  Also adds a vertical
     * strut to enforce the padding specified in the
     * Device Configuration File.
     *
     * @param cmp       GUI component being appended
     * 
     * @since  Jan 28, 2010
     * @author Christopher K. Allen
     */
    private void appendGuiComponent(Component cmp) {
        this.add(cmp, this.gbcTxtFlds);
        this.lstGuiCmps.add(cmp);
        this.gbcTxtFlds.gridy++;
        
        Component cmpStrut = Box.createVerticalStrut( INT_PAD_VER ); 
        this.add( cmpStrut, this.gbcTxtFlds);
        this.lstGuiCmps.add(cmpStrut);
        this.gbcTxtFlds.gridy++;
    }
    
    /**
     * Adds the global update button
     * to the bottom of the panel.
     *
     * 
     * @since  Jan 29, 2010
     * @author Christopher K. Allen
     */
    private void appendButtons() {
        
        GridBagConstraints      gbc = (GridBagConstraints) this.gbcTxtFlds.clone();
        
        // Add the force apply button
        gbc.anchor = GridBagConstraints.PAGE_END;
        gbc.weighty = 1.0;

        Box boxButtons = Box.createHorizontalBox();
        
        boxButtons.add(this.butRefresh);
        boxButtons.add(Box.createHorizontalStrut(INT_PAD_HOR));
        boxButtons.add(this.butApply);
        
        this.add(boxButtons, gbc);
        this.lstGuiCmps.add(boxButtons);
        
        this.gbcTxtFlds.gridy++;
    }
    
    
}
    
